package com.wanzi.util;


import java.io.*;
import java.math.BigInteger;
import java.net.ConnectException;
import java.net.URL;
import java.security.MessageDigest;
import java.util.*;

import com.sina.sae.memcached.SaeMemcache;
import com.wanzi.domain.AccessToken;
import com.wanzi.domain.menu.Menu;
import com.wanzi.domain.ticket.Ticket;
import net.sf.json.JSONException;
import net.sf.json.JSONObject;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.servlet.http.HttpServletRequest;

import com.wanzi.domain.Article;
import com.wanzi.domain.Message;
import com.wanzi.domain.Reply;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.core.util.QuickWriter;
import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
import com.thoughtworks.xstream.io.xml.PrettyPrintWriter;
import com.thoughtworks.xstream.io.xml.XppDriver;

/**
 * 微信相关工具类
 */
public class WeixinUtil {

    private final static Logger log = LogManager.getLogger(WeixinUtil.class);
    // 获取access_token的接口地址（GET） 限200（次/天）
    public final static String access_token_url = "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET";

    // 菜单创建（POST） 限100（次/天）
    public static String menu_create_url = "https://api.weixin.qq.com/cgi-bin/menu/create?access_token=ACCESS_TOKEN";

    // 创建二维码ticket
    public static String ticket_create_url = "https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=TOKEN";


	private static XStream xstream = new XStream(new XppDriver() {  
        public HierarchicalStreamWriter createWriter(Writer out) {  
            return new PrettyPrintWriter(out) {  
                // 对所有xml节点的转换都增加CDATA标记  
                boolean cdata = true;  
                @SuppressWarnings("unchecked")  
                public void startNode(String name, Class clazz) {  
                    super.startNode(name, clazz);  
                }  
                protected void writeText(QuickWriter writer, String text) {  
                    if (cdata) {  
                        writer.write("<![CDATA[");  
                        writer.write(text);  
                        writer.write("]]>");  
                    } else {  
                        writer.write(text);  
                    }  
                }  
            };  
        }  
    });  
	
	/**
	 * 将回复消息对象转换成xml字符串
	 * @param reply 回复消息对象
	 * @return 返回符合微信接口的xml字符串
	 */
	public static String replyToXml(Reply reply){
		String type = reply.getMsgType();
		if(Reply.TEXT.equals(type)){
			xstream.omitField(Reply.class, "articles");
			xstream.omitField(Reply.class, "articleCount");
			xstream.omitField(Reply.class, "musicUrl");
			xstream.omitField(Reply.class, "hQMusicUrl");
		}else if(Reply.MUSIC.equals(type)){
			xstream.omitField(Reply.class, "articles");
			xstream.omitField(Reply.class, "articleCount");
			xstream.omitField(Reply.class, "content");
		}else if(Reply.NEWS.equals(type)){
//			xstream.omitField(Reply.class, "content");
//			xstream.omitField(Reply.class, "musicUrl");
//			xstream.omitField(Reply.class, "hQMusicUrl");
            StringBuffer sb = new StringBuffer();
            sb.append("<xml><ToUserName><![CDATA[").append(reply.getToUserName())
                    .append("]]></ToUserName><FromUserName><![CDATA[").append(reply.getFromUserName())
                    .append("]]></FromUserName><CreateTime><![CDATA[").append(new Date().getTime())
                    .append("]]></CreateTime><MsgType><![CDATA[").append(type)
                    .append("]]></MsgType><ArticleCount><![CDATA[").append(reply.getArticleCount())
                    .append("]]></ArticleCount><Articles>");
            for (Article article:reply.getArticles()){
                sb.append("<item><Title><![CDATA[").append(article.getTitle())
                        .append("]]></Title><Description><![CDATA[").append(article.getDescription())
                        .append("]]></Description><PicUrl><![CDATA[").append(article.getPicUrl())
                        .append("]]></PicUrl><Url><![CDATA[").append(article.getUrl())
                        .append("]]></Url></item>");
            }
            sb.append("</Articles></xml>");
            return sb.toString();


		}
		xstream.autodetectAnnotations(true);  
		xstream.alias("xml", reply.getClass());
		xstream.alias("item", new Article().getClass());
		return xstream.toXML(reply);
	}
	
	
	/**
	 * 存储数据的Map转换为对应的Message对象
	 * @param map 存储数据的map
	 * @return 返回对应Message对象
	 */
	public static Message mapToMessage(Map<String,String> map){
		if(map == null) return null;
		String msgType = map.get("MsgType");
		Message message = new Message();
		message.setToUserName(map.get("ToUserName"));
		message.setFromUserName(map.get("FromUserName"));
		message.setCreateTime(new Date(Long.parseLong(map.get("CreateTime"))*1000l));
		message.setMsgType(msgType);
		message.setMsgId(map.get("MsgId"));
		if(msgType.equals(Message.TEXT)){
			message.setContent(map.get("Content"));
		}else if(msgType.equals(Message.IMAGE)){
			message.setPicUrl(map.get("PicUrl"));
		}else if(msgType.equals(Message.LINK)){
			message.setTitle(map.get("Title"));
			message.setDescription(map.get("Description"));
			message.setUrl(map.get("Url"));
		}else if(msgType.equals(Message.LOCATION)){
			message.setLocationX(map.get("Location_X"));
			message.setLocationY(map.get("Location_Y"));
			message.setScale(map.get("Scale"));
			message.setLabel(map.get("Label"));
		}else if(msgType.equals(Message.EVENT)){
			message.setEvent(map.get("Event"));
			message.setEventKey(map.get("EventKey"));
		}
		return message;
	}
	
	/**
	 * 解析request中的xml 并将数据存储到一个Map中返回
	 * @param request
	 */
	public static Map<String, String> parseXml(HttpServletRequest request){
		Map<String, String> map = new HashMap<String, String>();
		try {
			InputStream inputStream = request.getInputStream();
			SAXReader reader = new SAXReader();
			Document document = reader.read(inputStream);
			Element root = document.getRootElement();
			List<Element> elementList = root.elements();
			for (Element e : elementList)
				//遍历xml将数据写入map
				map.put(e.getName(), e.getText());
			inputStream.close();
			inputStream = null;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return map;
	}

	
	/**
	 * sha1加密算法
	 * @param key 需要加密的字符串
	 * @return 加密后的结果
	 */
	public static String sha1(String key) {
		try {
			MessageDigest md = MessageDigest.getInstance("SHA1");
			md.update(key.getBytes());
			String pwd = new BigInteger(1, md.digest()).toString(16);
			return pwd;
		} catch (Exception e) {
			e.printStackTrace();
			return key;
		}
	}



    /**
     * 发起https请求并获取结果
     *
     * @param requestUrl 请求地址
     * @param requestMethod 请求方式（GET、POST）
     * @param outputStr 提交的数据
     * @return JSONObject(通过JSONObject.get(key)的方式获取json对象的属性值)
     */
    public static JSONObject httpRequest(String requestUrl, String requestMethod, String outputStr) {
        JSONObject jsonObject = null;
        StringBuffer buffer = new StringBuffer();
        try {
            // 创建SSLContext对象，并使用我们指定的信任管理器初始化
            TrustManager[] tm = { new MyX509TrustManager() };
            SSLContext sslContext = SSLContext.getInstance("SSL", "SunJSSE");
            sslContext.init(null, tm, new java.security.SecureRandom());
            // 从上述SSLContext对象中得到SSLSocketFactory对象
            SSLSocketFactory ssf = sslContext.getSocketFactory();

            URL url = new URL(requestUrl);
            HttpsURLConnection httpUrlConn = (HttpsURLConnection) url.openConnection();
            httpUrlConn.setSSLSocketFactory(ssf);

            httpUrlConn.setDoOutput(true);
            httpUrlConn.setDoInput(true);
            httpUrlConn.setUseCaches(false);
            // 设置请求方式（GET/POST）
            httpUrlConn.setRequestMethod(requestMethod);

            if ("GET".equalsIgnoreCase(requestMethod))
                httpUrlConn.connect();

            // 当有数据需要提交时
            if (null != outputStr) {
                OutputStream outputStream = httpUrlConn.getOutputStream();
                // 注意编码格式，防止中文乱码
                outputStream.write(outputStr.getBytes("UTF-8"));
                outputStream.close();
            }

            // 将返回的输入流转换成字符串
            InputStream inputStream = httpUrlConn.getInputStream();
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, "utf-8");
            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);

            String str = null;
            while ((str = bufferedReader.readLine()) != null) {
                buffer.append(str);
            }
            bufferedReader.close();
            inputStreamReader.close();
            // 释放资源
            inputStream.close();
            inputStream = null;
            httpUrlConn.disconnect();
            jsonObject = JSONObject.fromObject(buffer.toString());
        } catch (ConnectException ce) {
            log.error("Weixin server connection timed out.");
        } catch (Exception e) {
            log.error("https request error:{}", e);
        }
        return jsonObject;
    }





    /**
     * 获取access_token
     *
     * @param appid 凭证
     * @param appsecret 密钥
     * @return
     */
    public static AccessToken getAccessToken(String appid, String appsecret) {
        AccessToken accessToken = null;

        Object obj = null;

        try {
            SaeMemcache mc = new SaeMemcache();
            mc.init();
            obj = mc.get(appid);
            if (obj == null){
                //已过期 重新请求
                String requestUrl = access_token_url.replace("APPID", appid).replace("APPSECRET", appsecret);
                JSONObject jsonObject = httpRequest(requestUrl, "GET", null);
                // 如果请求成功
                if (null != jsonObject) {
                    try {
                        accessToken = new AccessToken();
                        accessToken.setToken(jsonObject.getString("access_token"));
                        accessToken.setExpiresIn(jsonObject.getInt("expires_in"));
                        mc.set(appid,accessToken,7200);
                    } catch (JSONException e) {
                        accessToken = null;
                        // 获取token失败
                        log.error("获取token失败 errcode:{"+jsonObject.getInt("errcode")+"} errmsg:{"+jsonObject.getString("errmsg")+"}");
                    }
                }
            }else {
                System.out.println("拉取AccessToken为---->缓存 " );
                accessToken = (AccessToken)obj;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return accessToken;
    }





    /**
     * 创建菜单
     *
     * @param menu 菜单实例
     * @param accessToken 有效的access_token
     * @return 0表示成功，其他值表示失败
     */
    public static int createMenu(Menu menu, String accessToken) {
        int result = 0;

        // 拼装创建菜单的url
        String url = menu_create_url.replace("ACCESS_TOKEN", accessToken);
        // 将菜单对象转换成json字符串
        String jsonMenu = JSONObject.fromObject(menu).toString();
        // 调用接口创建菜单
        JSONObject jsonObject = httpRequest(url, "POST", jsonMenu);

        if (null != jsonObject) {
            if (0 != jsonObject.getInt("errcode")) {
                result = jsonObject.getInt("errcode");
                log.error("创建菜单失败 errcode:{"+jsonObject.getInt("errcode")+"} errmsg:{"+jsonObject.getString("errmsg")+"}");
            }
        }

        return result;
    }

    /**
     * 创建二维码
     * @param ticket 二维码实例
     * @param accessToken 有效的access_token
     * @return 0表示成功，其他值表示失败
     */
    public static int createTicket(Ticket ticket,String accessToken){
        int result = 0;
        // 拼装创建菜单的url
        String url = ticket_create_url.replace("TOKEN",accessToken);
        //拼装json对象
        StringBuffer jsonParam = new StringBuffer();

        if(ticket.getExpire() == 1){ //非永久
            jsonParam.append("{\"expire_seconds\": ")
                    .append(ticket.getExpireSeconds()).append(",\"action_name\":").append("\"")
                    .append(Ticket.no_forever_ticket).append("\"").append(",\"action_info\":")
                    .append("{\"scene\": ").append("{\"scene_id\": ").append(ticket.getSceneId()).append("}}}");
        }else{
            jsonParam.append("{\"action_name\": ").append("\"")
                    .append(Ticket.forever_ticket).append("\"").append(",\"action_info\":")
                    .append("{\"scene\": ").append("{\"scene_id\": ").append(ticket.getSceneId()).append("}}}");
        }

        System.out.println("jsonParam = " + jsonParam);
        // 调用接口 创建二维码
        JSONObject jsonObject = httpRequest(url, "POST", jsonParam.toString());

        if (null != jsonObject) {
            if (jsonObject.get("errcode") != null && 0 != jsonObject.getInt("errcode")) {
                result = jsonObject.getInt("errcode");
                log.error("创建菜单失败 errcode:{"+jsonObject.getInt("errcode")+"} errmsg:{"+jsonObject.getString("errmsg")+"}");
            } else {
                if(jsonObject.getString("ticket") != null){
                    System.out.println("jsonObject = " + jsonObject.getString("ticket"));
//                    System.out.println("jsonObject = " + jsonObject.getInt("expire_seconds"));
                }
            }
        }

        return result;
    }


    /**
     * 生成唯一标示
     * @return
     */
    public static String createUUID(){

        String ex = RandomString(2);

        String UUID = ex +"_"+ DateUtil.date2String(new Date(),"MMddHHmmssyyyy");
        return UUID;
    }


    /** 产生一个随机的字符串*/
    public static String RandomString(int length) {
        String str = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        Random random = new Random();
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < length; i++) {
            int num = random.nextInt(62);
            buf.append(str.charAt(num));
        }
        return buf.toString();
    }


    //https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=gQFm8DoAAAAAAAAAASxodHRwOi8vd2VpeGluLnFxLmNvbS9xL0lFenRmbmJsY09zSjY0TE9pbUktAAIE7CUxUwMEsAQAAA==
    public static void main(String[] args) {
        Ticket ticket = new Ticket();
        ticket.setExpire(0);
        ticket.setSceneId(8);
        ticket.setExpireSeconds(1200);


        // 第三方用户唯一凭证
        String appId = "wx272c39dc15deb93c";
        // 第三方用户唯一凭证密钥
        String appSecret = "bf8513741c39341b16a38254189ba8ba";

        // 调用接口获取access_token
        AccessToken at = WeixinUtil.getAccessToken(appId, appSecret);

        if (null != at) {
            int result =  WeixinUtil.createTicket(ticket, at.getToken());

            // 判断ticket创建结果
            if (0 == result)
                log.info("二维码成功！");
            else
                log.info("二维码失败，错误码：" + result);
        }

    }




}
